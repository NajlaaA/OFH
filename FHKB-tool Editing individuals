/**
 *
 * @author najla
 */
import java.util.*;
import javax.swing.*;
import java.io.*;
import java.awt.*;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.apibinding.OWLManager;
//import com.clarkparsia.pellet.owlapiv3.PelletReasoner;
import com.clarkparsia.pellet.owlapiv3.PelletReasonerFactory;
import com.clarkparsia.pellet.owlapiv3.PelletReasoner;
import org.semanticweb.owlapi.reasoner.OWLReasonerFactory;
//import uk.ac.manchester.cs.jfact.JFactReasoner;
import uk.ac.manchester.cs.jfact.JFactFactory;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import java.util.Collections;
//import java.net.URI;
import org.semanticweb.HermiT.Reasoner.ReasonerFactory;
import org.semanticweb.owlapi.reasoner.Node;
import org.semanticweb.owlapi.reasoner.NodeSet;

import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.semanticweb.owlapi.reasoner.SimpleConfiguration;
import org.mindswap.pellet.exceptions.PelletRuntimeException;

//import javax.swing.text.BadLocationException;
import org.semanticweb.owlapi.util.OWLEntityRemover;



public class LoadOntology extends javax.swing.JFrame implements ActionListener{

  

   OWLOntology ont;
   OWLOntologyManager manager;
   OWLDataFactory df = OWLManager.getOWLDataFactory();
   
   int reasonerID;
   OWLReasoner reasoner;
   
   
 
   OWLClass Person= df.getOWLClass(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#Person"));
   OWLClass Man= df.getOWLClass(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#Man"));
   OWLClass Woman= df.getOWLClass(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#Woman"));
   OWLClass Marriage= df.getOWLClass(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#Marriage"));
   
   OWLObjectProperty hasFather= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasFather"));
   OWLObjectProperty hasMother= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasMother"));
   OWLObjectProperty hasMalePartner= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasMalePartner"));
   OWLObjectProperty hasFemalePartner= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasFemalePartner"));
   OWLObjectProperty hasPartner= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasPartner"));
   OWLObjectProperty hasParent= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasParent"));
   OWLObjectProperty hasChild= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasChild"));
   OWLObjectProperty hasAncestor= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasAncestor"));
   OWLObjectProperty hasSpouse= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasSpouse"));
   OWLObjectProperty hasWife= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasWife"));
   OWLObjectProperty hasHusband= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasHusband"));
   OWLObjectProperty hasDaughter= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasDaughter"));
   OWLObjectProperty hasSon= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasSon"));
   OWLObjectProperty hasBrother= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasBrother"));
   OWLObjectProperty hasSister= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasSister"));
   OWLObjectProperty hasUncle= df.getOWLObjectProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasUncle"));
   
   OWLDataProperty hasBirthYear= df.getOWLDataProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasBirthYear"));
   OWLDataProperty hasDeathYear= df.getOWLDataProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasDeathYear"));
   OWLDataProperty hasFirstName= df.getOWLDataProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasFirstGivenName"));
   OWLDataProperty hasFamilyName= df.getOWLDataProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasFamilyName"));
   OWLDataProperty hasMarriageYear= df.getOWLDataProperty(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#hasMarriageYear"));
   
   DefaultListModel model= new DefaultListModel();
   DefaultListModel marriageModel= new DefaultListModel();
   DefaultTableModel tmodel;
   
   int persons=0;
   
   String[] firstNames =new String[1000];
   String[] lastNames =new String[1000];
   String[] birthYears =new String[1000];
   String[] deathYears =new String[1000];
   String[] marriageLabels= new String[1000];
   int Mcount=0;
   int count=0;
   
   
    
    public LoadOntology() {
       
        initComponents();     
        
        }   
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        Adding = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fName = new javax.swing.JTextField();
        birth = new javax.swing.JTextField();
        death = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        LName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        maleButton = new javax.swing.JRadioButton();
        femaleButton = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        fatherBirth = new javax.swing.JTextField();
        fatherName = new javax.swing.JTextField();
        fatherLast = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        fatherDeath = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        motherDeath = new javax.swing.JTextField();
        motherName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        motherBirth = new javax.swing.JTextField();
        motherLast = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list1 = new javax.swing.JList();
        editButton = new javax.swing.JButton();
        BaddFather = new javax.swing.JButton();
        addMotherB = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        spouseBirth = new javax.swing.JTextField();
        spouseLast = new javax.swing.JTextField();
        spouseFirst = new javax.swing.JTextField();
        spouseDeath = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        spouseM = new javax.swing.JRadioButton();
        spouseF = new javax.swing.JRadioButton();
        jLabel20 = new javax.swing.JLabel();
        marriageYear = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list2 = new javax.swing.JList();
        editMarriage = new javax.swing.JButton();
        deleteMarriage = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        execute = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        fatherOfQ = new javax.swing.JRadioButton();
        motherOfQ = new javax.swing.JRadioButton();
        ancestorsQ = new javax.swing.JRadioButton();
        parentsOfQ = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        childQ = new javax.swing.JRadioButton();
        husbandQ = new javax.swing.JRadioButton();
        wifeQ = new javax.swing.JRadioButton();
        spouseQ = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        brotherOfQ = new javax.swing.JRadioButton();
        sisterOfQ = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        personQ = new javax.swing.JRadioButton();
        manQ = new javax.swing.JRadioButton();
        womanQ = new javax.swing.JRadioButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fNew = new javax.swing.JMenuItem();
        fSave = new javax.swing.JMenuItem();
        fSaveAs = new javax.swing.JMenuItem();
        fExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        factPlus = new javax.swing.JRadioButtonMenuItem();
        hermit = new javax.swing.JRadioButtonMenuItem();
        pellet = new javax.swing.JRadioButtonMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FHKB Creator and Editor");

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Add individuals"));

        Adding.setText("Add");
        Adding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddingActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Individual:"));

        jLabel2.setText("First Name");

        jLabel3.setText("Last Name");

        jLabel4.setText("Year of Birth");

        fName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fNameActionPerformed(evt);
            }
        });

        death.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deathActionPerformed(evt);
            }
        });

        jLabel5.setText("Year of Death");

        jLabel6.setText("Sex:");

        buttonGroup1.add(maleButton);
        maleButton.setText("Male");

        buttonGroup1.add(femaleButton);
        femaleButton.setText("Female");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(femaleButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(death, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fName, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(LName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {LName, birth, death, fName});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(LName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(birth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(death, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(maleButton)
                    .addComponent(femaleButton)))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {LName, birth, death, fName});

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Individual's Father:"));

        jLabel8.setText("Year of Birth");

        jLabel1.setText(" Last Name");

        jLabel9.setText("Year of Death");

        jLabel13.setText("First Name");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(fatherName, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(fatherBirth)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fatherLast)
                    .addComponent(fatherDeath))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fatherBirth, fatherLast, fatherName});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fatherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(fatherLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fatherBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addComponent(fatherDeath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Individual's Mother:"));

        jLabel7.setText("First  Name");

        jLabel11.setText("Year of Birth");

        jLabel12.setText("Year of Death");

        jLabel10.setText("Last Name");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(motherBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(motherName, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(motherLast, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(motherDeath, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {motherBirth, motherDeath, motherLast, motherName});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(motherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(motherLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(motherDeath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11)
                    .addComponent(motherBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Individuals List"));

        list1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list1);

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        BaddFather.setText("Add/Edit father");
        BaddFather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaddFatherActionPerformed(evt);
            }
        });

        addMotherB.setText("Add/Edit mother");
        addMotherB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMotherBActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BaddFather, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addMotherB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {BaddFather, addMotherB, deleteButton, editButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(BaddFather))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(addMotherB)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BaddFather, addMotherB, deleteButton, editButton});

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Individual's Partner"));

        jLabel15.setText("First Name");

        jLabel16.setText("Year of Birth");

        jLabel17.setText("Last Name");

        jLabel18.setText("Year of Death");

        jLabel19.setText("Sex:");

        spouseM.setText("Male");

        spouseF.setText("Female");

        jLabel20.setText("Year of marriage");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel16)
                        .addComponent(jLabel15))
                    .addComponent(jLabel20))
                .addGap(34, 34, 34)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spouseBirth, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(marriageYear)
                    .addComponent(spouseFirst))
                .addGap(30, 30, 30)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(spouseM)
                        .addGap(18, 18, 18)
                        .addComponent(spouseF))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spouseDeath, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spouseLast, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jLabel17)
                        .addComponent(spouseLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(spouseFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spouseBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(spouseDeath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(spouseM)
                    .addComponent(spouseF)
                    .addComponent(jLabel20)
                    .addComponent(marriageYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {spouseBirth, spouseDeath, spouseFirst, spouseLast});

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Marriage Relations:"));

        jScrollPane3.setViewportView(list2);

        editMarriage.setText("Edit");
        editMarriage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMarriageActionPerformed(evt);
            }
        });

        deleteMarriage.setText("Delete");
        deleteMarriage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMarriageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(deleteMarriage, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editMarriage)
                    .addComponent(deleteMarriage)))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(Adding, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Adding)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Adding", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        execute.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        execute.setText("Execute");
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Query for specific individual", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        fatherOfQ.setText("Father of");
        fatherOfQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatherOfQActionPerformed(evt);
            }
        });

        motherOfQ.setText("Mother of");

        ancestorsQ.setText("Ancestors of");

        parentsOfQ.setText("Parent of");

        jLabel14.setText("Individual Label: ( i.e.  FirstName_LastName_BirthYear)");

        childQ.setText("Children of");

        husbandQ.setText("Husband");

        wifeQ.setText("Wife");

        spouseQ.setText("Spouse");

        jRadioButton7.setText("Sons");

        jRadioButton8.setText("Daughter");

        brotherOfQ.setText("Brother of");

        sisterOfQ.setText("Sisterof");

        jRadioButton1.setText("Grand mother of");

        jRadioButton2.setText("Grand father of");

        jRadioButton3.setText("Grand parent of");

        jRadioButton4.setText("Uncle");

        jRadioButton5.setText("Aunt");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fatherOfQ)
                                    .addComponent(motherOfQ))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spouseQ)
                                    .addComponent(wifeQ))
                                .addGap(73, 73, 73)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton8)
                                    .addComponent(jRadioButton7)))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(parentsOfQ)
                                .addGap(88, 88, 88)
                                .addComponent(husbandQ)
                                .addGap(67, 67, 67)
                                .addComponent(ancestorsQ))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(childQ)
                                .addGap(82, 82, 82)
                                .addComponent(brotherOfQ)
                                .addGap(59, 59, 59)
                                .addComponent(sisterOfQ)))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton4)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton2))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRadioButton5)
                                .addGap(42, 42, 42))))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fatherOfQ)
                    .addComponent(jRadioButton8)
                    .addComponent(spouseQ)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(motherOfQ)
                    .addComponent(jRadioButton7)
                    .addComponent(wifeQ)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parentsOfQ)
                    .addComponent(ancestorsQ)
                    .addComponent(husbandQ)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(childQ)
                    .addComponent(brotherOfQ)
                    .addComponent(sisterOfQ)
                    .addComponent(jRadioButton4))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General Query", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        personQ.setText("Person");

        manQ.setText("Man");

        womanQ.setText("Woman");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manQ)
                    .addComponent(womanQ)
                    .addComponent(personQ))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(personQ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manQ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(womanQ)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(execute, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(execute, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DL Query", jPanel6);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Individuals table"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Individual name", "Individual birth year", "Individual death year", "Individual father", "Individual mother"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics"));

        jLabel21.setText("Number of persons:");

        jLabel22.setText("jLabel22");

        jLabel23.setText("Number of men:");

        jLabel24.setText("jLabel24");

        jLabel25.setText("Number of women:");

        jLabel26.setText("jLabel26");

        jLabel27.setText("Number of father:");

        jLabel28.setText("Number of mother:");

        jLabel29.setText("Number of sons:");

        jLabel30.setText("jLabel30");

        jLabel31.setText("jLabel31");

        jLabel32.setText("jLabel32");

        jLabel33.setText("Number of grandmother:");

        jLabel34.setText("Number of grandfather:");

        jLabel35.setText("Number of uncles:");

        jLabel36.setText("jLabel36");

        jLabel37.setText("jLabel37");

        jLabel38.setText("jLabel38");

        jLabel39.setText("Number of aunts:");

        jLabel40.setText("jLabel40");

        jLabel41.setText("Number of merriage relations:");

        jLabel42.setText("jLabel42");

        jLabel43.setText("Number of husband:");

        jLabel44.setText("jLabel44");

        jLabel45.setText("Number of wifes:");

        jLabel46.setText("jLabel46");

        jLabel47.setText("Number of daughters:");

        jLabel48.setText("jLabel48");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel14Layout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel22))
                        .addGroup(jPanel14Layout.createSequentialGroup()
                            .addComponent(jLabel23)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24))
                        .addGroup(jPanel14Layout.createSequentialGroup()
                            .addComponent(jLabel25)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel26)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel30))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel31))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel32)))
                .addGap(52, 52, 52)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel44))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel40))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel36))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel34)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel37)))
                        .addGap(78, 78, 78)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel47)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel48))
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel45)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel46)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel33)
                    .addComponent(jLabel36)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel34)
                    .addComponent(jLabel37)
                    .addComponent(jLabel47)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26)
                    .addComponent(jLabel35)
                    .addComponent(jLabel38))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jLabel30)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel31)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel32)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab3", jPanel12);

        jMenu1.setText("File");

        fNew.setText("New");
        fNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fNewActionPerformed(evt);
            }
        });
        jMenu1.add(fNew);

        fSave.setText("Save");
        fSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fSaveActionPerformed(evt);
            }
        });
        jMenu1.add(fSave);

        fSaveAs.setText("Save as");
        jMenu1.add(fSaveAs);

        fExit.setText("Exit");
        fExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fExitActionPerformed(evt);
            }
        });
        jMenu1.add(fExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Add new individual");
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Add individual's father");
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Add individual's mother");
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Add marriage");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem10.setText("Add partner");
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reasoner");

        jMenuItem11.setText("Start reasoner");
        jMenu3.add(jMenuItem11);

        jMenuItem1.setText("Synchronize reasoner");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem12.setText("Stop reasoner");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);
        jMenu3.add(jSeparator1);

        buttonGroup3.add(factPlus);
        factPlus.setText("FaCT++");
        factPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factPlusActionPerformed(evt);
            }
        });
        jMenu3.add(factPlus);

        buttonGroup3.add(hermit);
        hermit.setText("HermiT 1.3.8");
        hermit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hermitActionPerformed(evt);
            }
        });
        jMenu3.add(hermit);

        buttonGroup3.add(pellet);
        pellet.setText("Pellet");
        pellet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pelletActionPerformed(evt);
            }
        });
        jMenu3.add(pellet);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("View");

        jMenuItem13.setText("Individual's information view");
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Family tree view");
        jMenu4.add(jMenuItem14);

        jMenuItem15.setText("Query view");
        jMenu4.add(jMenuItem15);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>                        

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {                                            
       reasoner.dispose();
    }                                           

    private void hermitActionPerformed(java.awt.event.ActionEvent evt) {                                       
       
         reasonerID=1;
         ReasonerFactory rf = new ReasonerFactory();
         reasoner=rf.createReasoner(ont);
        
        System.out.println(reasoner.isConsistent());
        Numbers();
    }                                      

    private void factPlusActionPerformed(java.awt.event.ActionEvent evt) {                                         
       JFactFactory factory = new JFactFactory();
       reasoner = factory.createReasoner(ont);
       reasonerID=3;
       System.out.println(reasoner.isConsistent());
       Numbers();
    }                                        

    private void deathActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void fNameActionPerformed(java.awt.event.ActionEvent evt) {                                      
       
    }                                     

    private void AddingActionPerformed(java.awt.event.ActionEvent evt) {                                       

       String label1,fath,moth, spouseLabel, marriageLabel;
        label1=fName.getText()+"_"+LName.getText()+"_"+birth.getText();
        fath=fatherName.getText()+"_"+fatherLast.getText()+"_"+fatherBirth.getText();
        moth= motherName.getText()+"_"+motherLast.getText()+"_"+motherBirth.getText();
          //Adding individual data
          OWLIndividual matt = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+label1));
          OWLClassAssertionAxiom ca1;
          if(maleButton.isSelected())
               ca1 = df.getOWLClassAssertionAxiom(Man, matt);
          else if(femaleButton.isSelected())
               ca1 = df.getOWLClassAssertionAxiom(Woman, matt);
          else
             ca1 = df.getOWLClassAssertionAxiom(Person, matt);
        
          manager.addAxiom(ont, ca1);
       
        if(!(model.contains(label1)) )
        {  
          model.addElement(label1);
          
          //Creating String arrays for AutoComplete textfields
          firstNames[count]= fName.getText();
          lastNames[count]= LName.getText();
          birthYears[count]= birth.getText();
          if(!death.getText().isEmpty())
          {
              deathYears[count]=death.getText();
              new AutoTextField(death, deathYears);
          }
          count++;
          new AutoTextField(fName, firstNames);
          new AutoTextField(LName, lastNames);
          new AutoTextField(birth, birthYears);
                 
          OWLAxiom asser1= df.getOWLDataPropertyAssertionAxiom(hasFirstName, matt, fName.getText());
          manager.addAxiom(ont,asser1);
          OWLAxiom asser2= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, matt, LName.getText());
          manager.addAxiom(ont,asser2);
          OWLAxiom asser3= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, matt, Integer.parseInt(birth.getText()));
          manager.addAxiom(ont,asser3);
          if(!death.getText().isEmpty()) 
            { OWLAxiom asser4= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, matt, Integer.parseInt(death.getText()));
              manager.addAxiom(ont,asser4); 
            }
        }
        else
            JOptionPane.showMessageDialog(new JFrame(), "The individual is already exist", "Dialog",
        JOptionPane.INFORMATION_MESSAGE);
        
        
        //Adding spouse data
            if(!spouseFirst.getText().isEmpty())
            {
              spouseLabel=spouseFirst.getText()+"_"+spouseLast.getText()+"_"+spouseBirth.getText();
              marriageLabel= "MarriageOf_"+ fName.getText()+"_and_"+ spouseFirst.getText();
              OWLIndividual spouse = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+spouseLabel));
              OWLIndividual marriageInd= df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+marriageLabel));
              OWLClassAssertionAxiom ca3 = df.getOWLClassAssertionAxiom(Marriage, marriageInd);
                manager.addAxiom(ont, ca3);
              
              if(spouseM.isSelected())
              {
                OWLClassAssertionAxiom ca2 = df.getOWLClassAssertionAxiom(Man, spouse);
                manager.addAxiom(ont, ca2);
                OWLAxiom assertion1 = df.getOWLObjectPropertyAssertionAxiom(hasMalePartner, marriageInd, spouse);
                manager.addAxiom(ont, assertion1);
                OWLAxiom assertion2 = df.getOWLObjectPropertyAssertionAxiom(hasFemalePartner, marriageInd, matt);
                manager.addAxiom(ont, assertion2);
              }
              else if(spouseF.isSelected())
              {
                OWLClassAssertionAxiom ca2= df.getOWLClassAssertionAxiom(Woman, spouse);
                manager.addAxiom(ont, ca2);
                OWLAxiom assertion1 = df.getOWLObjectPropertyAssertionAxiom(hasFemalePartner, marriageInd, spouse);
                manager.addAxiom(ont, assertion1);
                OWLAxiom assertion2 = df.getOWLObjectPropertyAssertionAxiom(hasMalePartner, marriageInd, matt);
                manager.addAxiom(ont, assertion2);
              }
             else
              {
                 OWLClassAssertionAxiom ca2 = df.getOWLClassAssertionAxiom(Person, spouse);
                 manager.addAxiom(ont, ca2);
                OWLAxiom assertion1 = df.getOWLObjectPropertyAssertionAxiom(hasPartner, marriageInd, spouse);
                manager.addAxiom(ont, assertion1);
                OWLAxiom assertion2 = df.getOWLObjectPropertyAssertionAxiom(hasPartner, marriageInd, matt);
                manager.addAxiom(ont, assertion2);
              }
        OWLAxiom assertion3 = df.getOWLDataPropertyAssertionAxiom(hasMarriageYear, marriageInd, Integer.parseInt(marriageYear.getText()));
        manager.addAxiom(ont, assertion3);
        
        marriageModel.addElement(marriageLabel);
        list2.setModel(marriageModel);
        marriageLabels[Mcount]= marriageLabel;
       
        if(!(model.contains(spouseLabel)) )
        {   
          model.addElement(spouseLabel);
          
          //Creating String arrays for AutoComplete textfields
          firstNames[count]= spouseFirst.getText();
          lastNames[count]= spouseLast.getText();
          birthYears[count]= spouseBirth.getText();
          if(!spouseDeath.getText().isEmpty())
          {
              deathYears[count]=spouseDeath.getText();
              new AutoTextField(spouseDeath, deathYears);
          }
          count++;
          new AutoTextField(spouseFirst, firstNames);
          new AutoTextField(spouseLast, lastNames);
          new AutoTextField(spouseBirth, birthYears);
   
        }
        
          OWLAxiom asser5= df.getOWLDataPropertyAssertionAxiom(hasFirstName, spouse, spouseFirst.getText());
          manager.addAxiom(ont,asser5);
          OWLAxiom asser6= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, spouse, spouseLast.getText());
          manager.addAxiom(ont,asser6);
          OWLAxiom asser7= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, spouse, Integer.parseInt(spouseBirth.getText()));
          manager.addAxiom(ont,asser7);
          if(!spouseDeath.getText().isEmpty())
          {
             OWLAxiom asser8= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, spouse, Integer.parseInt(spouseDeath.getText()));
             manager.addAxiom(ont,asser8); 
          }
        
         }
        

        //Ading individual's father data
        if(!fatherName.getText().isEmpty()){
            
            if(!(model.contains(fath))){
            model.addElement(fath);
            
            //Creating String arrays for AutoComplete textfields
            firstNames[count]= fatherName.getText();
            lastNames[count]= fatherLast.getText();
            birthYears[count]= fatherBirth.getText();
            if(!fatherDeath.getText().isEmpty())
            {
              deathYears[count]= fatherDeath.getText();
              new AutoTextField(fatherDeath, deathYears);
            }
            count++;
            new AutoTextField(fatherName, firstNames);
            new AutoTextField(fatherLast, lastNames);
            new AutoTextField(fatherBirth, birthYears);}
          
            OWLIndividual father = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+fath));
            OWLClassAssertionAxiom classAssertion2 = df.getOWLClassAssertionAxiom(Man, father);
            manager.addAxiom(ont, classAssertion2);
            

            OWLAxiom assertion4 = df.getOWLObjectPropertyAssertionAxiom(hasFather, matt, father);
            manager.addAxiom(ont, assertion4);
            
            if(maleButton.isSelected())
            {
              OWLAxiom assertion5 = df.getOWLObjectPropertyAssertionAxiom(hasSon, father, matt);
              manager.addAxiom(ont, assertion5);}
            else if(femaleButton.isSelected())
            { OWLAxiom assertion6 = df.getOWLObjectPropertyAssertionAxiom(hasDaughter, father, matt);
              manager.addAxiom(ont, assertion6);}
            else
            {
              OWLAxiom assertion7 = df.getOWLObjectPropertyAssertionAxiom(hasChild, father, matt);
              manager.addAxiom(ont, assertion7);  
            }
            
            OWLAxiom asser9= df.getOWLDataPropertyAssertionAxiom(hasFirstName, father, fatherName.getText());
            manager.addAxiom(ont,asser9);
            OWLAxiom asser10= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, father, fatherLast.getText());
            manager.addAxiom(ont,asser10);
            OWLAxiom asser11= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, father, Integer.parseInt(fatherBirth.getText()));
            manager.addAxiom(ont,asser11);
            if(!fatherDeath.getText().isEmpty())
            {
              OWLAxiom asser12= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, father, Integer.parseInt(fatherDeath.getText()));
              manager.addAxiom(ont,asser12);  
            }
        }
        //Adding individual's mother
        if(!motherName.getText().isEmpty() ){
            if(!(model.contains(moth)))
            {
                model.addElement(moth);
            //Creating String arrays for AutoComplete textfields
            firstNames[count]= motherName.getText();
            lastNames[count]= motherLast.getText();
            birthYears[count]= motherBirth.getText();
            if(!motherDeath.getText().isEmpty())
            {
              deathYears[count]= motherDeath.getText();
              new AutoTextField(motherDeath, deathYears);  
            }
            count++;
            new AutoTextField(motherName, firstNames);
            new AutoTextField(motherLast, lastNames);
            new AutoTextField(motherBirth, birthYears);
            }
            
            OWLIndividual mother = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+moth));
            OWLClassAssertionAxiom classAssertion3 = df.getOWLClassAssertionAxiom(Woman, mother);
            manager.addAxiom(ont, classAssertion3);

            OWLAxiom assertion8 = df.getOWLObjectPropertyAssertionAxiom(hasMother, matt, mother);
            manager.addAxiom(ont, assertion8);
            
            if(maleButton.isSelected())
            { OWLAxiom assertion9 = df.getOWLObjectPropertyAssertionAxiom(hasSon, mother, matt);
              manager.addAxiom(ont, assertion9);}
            else if(femaleButton.isSelected())
            { OWLAxiom assertion10 = df.getOWLObjectPropertyAssertionAxiom(hasDaughter, mother, matt);
              manager.addAxiom(ont, assertion10);}
            else
            {
              OWLAxiom assertion11 = df.getOWLObjectPropertyAssertionAxiom(hasChild, mother, matt);
              manager.addAxiom(ont, assertion11);  
            }
            
            OWLAxiom asser13= df.getOWLDataPropertyAssertionAxiom(hasFirstName, mother, motherName.getText());
            manager.addAxiom(ont,asser13);
            OWLAxiom asser14= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, mother, motherLast.getText());
            manager.addAxiom(ont,asser14);
            OWLAxiom asser15= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, mother, Integer.parseInt(motherBirth.getText()));
            manager.addAxiom(ont,asser15);
            if(!motherDeath.getText().isEmpty())
            {
              OWLAxiom asser16= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, mother, Integer.parseInt(motherDeath.getText()));
              manager.addAxiom(ont,asser16);
            }
        }
        list1.setModel(model);
        tmodel= (DefaultTableModel)jTable1.getModel();
        
        try {

            manager.saveOntology(ont);
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(LoadOntology.class.getName()).log(Level.SEVERE, null, ex);
        }  
        
        //Adding individual information to the table
        tmodel.addRow(new Object[]{fName.getText()+" "+LName.getText(),birth.getText(),death.getText(),fatherName.getText()+" "+fatherLast.getText(), motherName.getText()+" "+motherLast.getText()});
        if(!fatherName.getText().isEmpty())
        tmodel.addRow(new Object[]{fatherName.getText()+" "+fatherLast.getText(),fatherBirth.getText(),fatherDeath.getText()," ", " "});
        if(!motherName.getText().isEmpty())
        tmodel.addRow(new Object[]{motherName.getText()+" "+motherLast.getText(),motherBirth.getText(),motherDeath.getText()," ", " "});

        
         fName.setText("");  LName.setText("");  birth.setText("");
        fatherName.setText("");  fatherLast.setText("");  fatherBirth.setText(""); fatherDeath.setText("");
        motherName.setText("");  motherLast.setText("");   motherBirth.setText(""); motherDeath.setText("");
        spouseFirst.setText(""); spouseLast.setText("");  spouseBirth.setText("");  spouseDeath.setText(""); 
        maleButton.setSelected(false);  femaleButton.setSelected(false); 
    }                                      

    private void addMotherBActionPerformed(java.awt.event.ActionEvent evt) {                                           
        OWLIndividual indMother=null;
       String  mfirst="", mlast="", mbir="", mdea="", motherLabel="";
       int classType=1;
       String childType="", type="";
       String childLabel= (String)list1.getSelectedValue();
       OWLIndividual indi = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+childLabel));
       
       Set<OWLClassExpression> y=indi.getTypes(ont);
       for(OWLClassExpression j:y)
           childType=j.getSignature().toString();
      
       if(!childType.isEmpty())
       {String[] parts3= childType.split("#");
       String part3=parts3[1];
        type= part3.substring(0,part3.length()-2);}
       
       Set<OWLIndividual> mom= indi.getObjectPropertyValues(hasMother, ont);
       for(OWLIndividual m:mom)
           indMother=m;
       
       if(indMother != null)
       {String dLabel = indMother.getSignature().toString();
       System.out.println(indMother.getSignature().toString());
       String[] parts2= dLabel.split("#");
       String part2=parts2[1];
       motherLabel= part2.substring(0,part2.length()-2);
       
       
       Set<OWLLiteral> FN= indMother.getDataPropertyValues(hasFirstName, ont);
       for(OWLLiteral f:FN)
           mfirst=f.getLiteral();
       
       Set<OWLLiteral> LN= indMother.getDataPropertyValues(hasFamilyName, ont);
       for(OWLLiteral l:LN)
           mlast=l.getLiteral();
       
       Set<OWLLiteral> BY= indMother.getDataPropertyValues(hasBirthYear, ont);
       for(OWLLiteral b:BY)
           mbir=b.getLiteral();
       
       Set<OWLLiteral> DY= indMother.getDataPropertyValues(hasDeathYear, ont);
       for(OWLLiteral d:DY)
           mdea=d.getLiteral();
       }
       EditParent editP= new EditParent();
       editP.setVisible(true);
       editP.setValues(childLabel,motherLabel,mfirst,mlast,mbir, mdea,classType,type, model); 
    }                                          

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
       String first="", last="", bir="", dea="", cls="", classType="";
       OWLIndividual mama=null, dada=null;
       String motherLabel="";  String fatherLabel="";
       
       String label2= (String)list1.getSelectedValue();
       OWLIndividual ind = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+label2));
       System.out.println("code1"+ind.getSignature().toString());
       
       
       Set<OWLClassExpression> x=ind.getTypes(ont);
       for(OWLClassExpression i:x)
       {
           cls=i.getSignature().toString();
       System.out.println("class type in edit:"+cls+"type");}
       if(!cls.isEmpty())
       {String[] parts3= cls.split("#");
       String part3=parts3[1];
        classType= part3.substring(0,part3.length()-2);}
       
       
       Set<OWLLiteral> FN= ind.getDataPropertyValues(hasFirstName, ont);
       for(OWLLiteral f:FN)
           first=f.getLiteral();
       
       Set<OWLLiteral> LN= ind.getDataPropertyValues(hasFamilyName, ont);
       for(OWLLiteral l:LN)
           last=l.getLiteral();
       
       Set<OWLLiteral> BY= ind.getDataPropertyValues(hasBirthYear, ont);
       for(OWLLiteral b:BY)
           bir=b.getLiteral();
       
       Set<OWLLiteral> DY= ind.getDataPropertyValues(hasDeathYear, ont);
       for(OWLLiteral d:DY)
           dea=d.getLiteral();
     
       Set<OWLIndividual> mom= ind.getObjectPropertyValues(hasMother, ont);
       for(OWLIndividual m:mom)
           mama=m;
      
       if(mama != null)
       { String mLabel = mama.getSignature().toString();
       String[] parts1= mLabel.split("#");
       String part1=parts1[1];
       motherLabel= part1.substring(0,part1.length()-2);
       }
       
       Set<OWLIndividual> dad= ind.getObjectPropertyValues(hasFather, ont);
       for(OWLIndividual d:dad)
           dada=d;
       if(dada != null)
       {String dLabel = dada.getSignature().toString();
       String[] parts2= dLabel.split("#");
       String part2=parts2[1];
       fatherLabel= part2.substring(0,part2.length()-2);
       }
       
      EditIndividual editFrame= new EditIndividual();
       editFrame.setVisible(true);
       editFrame.setValues(label2,first,last,bir, dea,motherLabel,fatherLabel,classType, model); 
     
    }                                          

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String deleteLabel= (String)list1.getSelectedValue();
        model.removeElement(deleteLabel);
        OWLNamedIndividual deleteInd = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+deleteLabel));
        OWLEntityRemover remover = new OWLEntityRemover(manager, Collections.singleton(ont));
        deleteInd.accept(remover);
        manager.applyChanges(remover.getChanges());
        remover.reset();
        
    }                                            

    private void fatherOfQActionPerformed(java.awt.event.ActionEvent evt) {                                          

    }                                         

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {                                        
       String indQ= jTextField2.getText();
       OWLNamedIndividual indQuery = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+indQ));
        
       
       Node<OWLClass> x=reasoner.getEquivalentClasses(Man);
       for(OWLClass xx:x)
           System.out.println(xx.getIRI().getFragment());
      
       if(personQ.isSelected())
       {
           jTextArea1.setText("");
           NodeSet<OWLNamedIndividual> inds1=reasoner.getInstances(Person, false);
           for (Node<OWLNamedIndividual> m : inds1) {
            for (OWLNamedIndividual j : m.getEntities()) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }}  
       }   
       
       if(manQ.isSelected())
       {
          jTextArea1.setText("");
          NodeSet<OWLNamedIndividual> inds2=reasoner.getInstances(Man, false);
           for (Node<OWLNamedIndividual> m : inds2) {
            for (OWLNamedIndividual j : m.getEntities()) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }}  
       }
       
       if(womanQ.isSelected())
       {
           jTextArea1.setText("");
           NodeSet<OWLNamedIndividual> inds2=reasoner.getInstances(Woman, false);
           for (Node<OWLNamedIndividual> m : inds2) {
            for (OWLNamedIndividual j : m.getEntities()) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }}    
       }
       
       
       if(fatherOfQ.isSelected())
      {
          jTextArea1.setText("");
          NodeSet<OWLNamedIndividual> dad=reasoner.getObjectPropertyValues(indQuery, hasFather);
         
          Set<OWLNamedIndividual> values = dad.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }
      }
       
       
       if(motherOfQ.isSelected())
      {
          jTextArea1.setText("");
          NodeSet<OWLNamedIndividual> mom=reasoner.getObjectPropertyValues(indQuery, hasMother);
         
          Set<OWLNamedIndividual> values = mom.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }
      }
       
      if(parentsOfQ.isSelected())
       {
           jTextArea1.setText("");
           NodeSet<OWLNamedIndividual> parent=reasoner.getObjectPropertyValues(indQuery, hasParent);
         
          Set<OWLNamedIndividual> values = parent.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }
       }    
         
      if(childQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> children =reasoner.getObjectPropertyValues(indQuery, hasChild);
         
          Set<OWLNamedIndividual> values = children.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            } 
      }
      
      
      if(ancestorsQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> ancestor =reasoner.getObjectPropertyValues(indQuery, hasAncestor);
         
          Set<OWLNamedIndividual> values = ancestor.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            } 
      }
      
      
     
      if(wifeQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> wife =reasoner.getObjectPropertyValues(indQuery, hasWife);
         
          Set<OWLNamedIndividual> values = wife.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            } 
      }
      
      if(husbandQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> husband =reasoner.getObjectPropertyValues(indQuery, hasHusband);
         
          Set<OWLNamedIndividual> values = husband.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            } 
      }
      
      
      if(spouseQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> spouse =reasoner.getObjectPropertyValues(indQuery, hasSpouse);
         
          Set<OWLNamedIndividual> values = spouse.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            } 
      }
      
      if(brotherOfQ.isSelected())
      {
         jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> brother =reasoner.getObjectPropertyValues(indQuery, hasBrother);
         
          Set<OWLNamedIndividual> values = brother.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }   
      }
      
      if(personQ.isSelected()&& brotherOfQ.isSelected()&& parentsOfQ.isSelected())
      {
        jTextArea1.setText("");
         NodeSet<OWLNamedIndividual> uncle =reasoner.getObjectPropertyValues(indQuery, hasUncle);
         
          Set<OWLNamedIndividual> values = uncle.getFlattened();
            for (OWLNamedIndividual j : values) {
                if(jTextArea1.getText().equals(""))
                  jTextArea1.setText(j.getIRI().getFragment());
                else
                  jTextArea1.setText(jTextArea1.getText()+ "\n"+j.getIRI().getFragment());
            }   
      }
       
    }                                       

    private void editMarriageActionPerformed(java.awt.event.ActionEvent evt) {                                             
      
        String label= (String)list2.getSelectedValue();
       OWLIndividual ind2 = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+label));
       OWLIndividual fPartner=null, mPartner=null;
       String mYear="", mPartnerLabel="", fPartnerLabel="";
       
       
       Set<OWLLiteral> MY= ind2.getDataPropertyValues(hasMarriageYear, ont);
       for(OWLLiteral d:MY)
           mYear=d.getLiteral();
     
       Set<OWLIndividual> female= ind2.getObjectPropertyValues(hasFemalePartner, ont);
       for(OWLIndividual f:female)
           fPartner=f;
      
       if(fPartner != null)
       { String fLabel = fPartner.getSignature().toString();
       String[] parts1= fLabel.split("#");
       String part1=parts1[1];
       fPartnerLabel= part1.substring(0,part1.length()-2);
       }
       
       Set<OWLIndividual> male= ind2.getObjectPropertyValues(hasMalePartner, ont);
       for(OWLIndividual m:male)
           mPartner=m;
      
       if(mPartner != null)
       { String mLabel = mPartner.getSignature().toString();
       String[] parts2= mLabel.split("#");
       String part2=parts2[1];
       mPartnerLabel= part2.substring(0,part2.length()-2);
       }
       
       EditMarriage EMFrame= new EditMarriage();
       EMFrame.setVisible(true);
       EMFrame.setValues(mYear, mPartnerLabel, fPartnerLabel,label,marriageModel);
       
    }                                            

    private void deleteMarriageActionPerformed(java.awt.event.ActionEvent evt) {                                               
        String deleteLabel= (String)list2.getSelectedValue();
        marriageModel.removeElement(deleteLabel);
        OWLNamedIndividual deleteInd = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+deleteLabel));
        OWLEntityRemover remover = new OWLEntityRemover(manager, Collections.singleton(ont));
        deleteInd.accept(remover);
        manager.applyChanges(remover.getChanges());
        remover.reset();
        
    }                                              

    private void pelletActionPerformed(java.awt.event.ActionEvent evt) {                                       
   
        PelletReasonerFactory reasonerFactory= new PelletReasonerFactory();    
        reasoner =reasonerFactory.createReasoner(ont);
        System.out.println(reasoner.isConsistent());
        reasonerID=2;
        Numbers();
        
    }                                      

    private void BaddFatherActionPerformed(java.awt.event.ActionEvent evt) {                                           
       OWLIndividual indFather=null;
       String  first="", last="", bir="", dea="", fatherLabel="";
       int classType=1;
       String childType="", type="";
       String childLabel= (String)list1.getSelectedValue();
       OWLIndividual indi = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+childLabel));
       
       Set<OWLClassExpression> y=indi.getTypes(ont);
       for(OWLClassExpression j:y)
           childType=j.getSignature().toString();
      
       if(!childType.isEmpty())
       {String[] parts3= childType.split("#");
       String part3=parts3[1];
        type= part3.substring(0,part3.length()-2);}
       
       Set<OWLIndividual> dad= indi.getObjectPropertyValues(hasFather, ont);
       for(OWLIndividual d:dad)
           indFather=d;
       
       if(indFather != null)
       {String dLabel = indFather.getSignature().toString();
       System.out.println(indFather.getSignature().toString());
       String[] parts2= dLabel.split("#");
       String part2=parts2[1];
       fatherLabel= part2.substring(0,part2.length()-2);
       
       
       Set<OWLLiteral> FN= indFather.getDataPropertyValues(hasFirstName, ont);
       for(OWLLiteral f:FN)
           first=f.getLiteral();
       
       Set<OWLLiteral> LN= indFather.getDataPropertyValues(hasFamilyName, ont);
       for(OWLLiteral l:LN)
           last=l.getLiteral();
       
       Set<OWLLiteral> BY= indFather.getDataPropertyValues(hasBirthYear, ont);
       for(OWLLiteral b:BY)
           bir=b.getLiteral();
       
       Set<OWLLiteral> DY= indFather.getDataPropertyValues(hasDeathYear, ont);
       for(OWLLiteral d:DY)
           dea=d.getLiteral();
       }
       EditParent editP= new EditParent();
       editP.setVisible(true);
       editP.setValues(childLabel,fatherLabel,first,last,bir, dea,classType,type, model); 
        
    }                                          

    private void list1ValueChanged(javax.swing.event.ListSelectionEvent evt) {                                   
       
    }                                  

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        reasoner.flush();
    }                                          

    private void fNewActionPerformed(java.awt.event.ActionEvent evt) {                                     
     model.removeAllElements();
       
        try{
             manager = OWLManager.createOWLOntologyManager();
            File file1 = new File("C://Users/najla/Desktop/MSc project/OWL API/fhkb-mostclasses-noabox.owl");
            ont = manager.loadOntologyFromOntologyDocument(file1);
            
        }catch(OWLOntologyCreationException e )
        {
        System.err.println("OWLOntologyCreationException: " + e.getMessage()); 
        }
            
    }                                    

    private void fSaveActionPerformed(java.awt.event.ActionEvent evt) {                                      
      try {

            manager.saveOntology(ont);
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(LoadOntology.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }                                     

    private void fExitActionPerformed(java.awt.event.ActionEvent evt) {                                      
       System.exit(0); 
    }                                     

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        try{
            
            int row= jTable1.getSelectedRow();
            int column= jTable1.getSelectedColumn();
            //String index = (String)jTable1.getModel().getValueAt(row,column);
            String click= jTable1.getModel().getValueAt(row, column).toString();
            
            int constantColumn=0;
            //search for the clicked text in the table
            for(int i = 0; i < jTable1.getRowCount(); i++){
                if(jTable1.getModel().getValueAt(i, constantColumn).equals(click)){
                   jTable1.changeSelection(i, constantColumn , false, false);
                 }
              }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }                                    
    
    public void setModifiedMarriageValues(String mLabel, String fLabel, String my,String preMLabel ,DefaultListModel mm)
    {
      
        String[] parts1= mLabel.split("_");
        String part1 =parts1[0];
        
        String[] parts2= fLabel.split("_");
        String part2= parts2[0];
        
        String newMarriageLabel= "MarriageOf_"+part1+"_and_"+part2;
        marriageModel=mm;
        
      //Load ontolgy again 
          try{
             manager = OWLManager.createOWLOntologyManager();
            File file1 = new File("C://Users/najla/Desktop/MSc project/OWL API/fhkb-mostclasses-noabox.owl");
            ont = manager.loadOntologyFromOntologyDocument(file1);
          
        }catch(OWLOntologyCreationException e )
        {
        System.err.println("OWLOntologyCreationException: " + e.getMessage()); 
        }
      
      
      //delete previous label
     OWLNamedIndividual removedInd = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+preMLabel));
     OWLEntityRemover remover = new OWLEntityRemover(manager, Collections.singleton(ont));
     removedInd.accept(remover);
     manager.applyChanges(remover.getChanges());
     remover.reset();
     list2.setModel(marriageModel);
     marriageModel.removeElement(preMLabel);
     
     //Adding the new marriage data
    
       OWLIndividual marriageInd= df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+newMarriageLabel));
       OWLClassAssertionAxiom ca6 = df.getOWLClassAssertionAxiom(Marriage, marriageInd);
       manager.addAxiom(ont, ca6);
       OWLIndividual malePartner= df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+mLabel));
       OWLIndividual femalePartner= df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+fLabel));
       
       OWLAxiom assertion1 = df.getOWLObjectPropertyAssertionAxiom(hasMalePartner, marriageInd, malePartner);
       manager.addAxiom(ont, assertion1);
       OWLAxiom assertion2 = df.getOWLObjectPropertyAssertionAxiom(hasFemalePartner, marriageInd, femalePartner);
       manager.addAxiom(ont, assertion2);
       OWLAxiom assertion3 = df.getOWLDataPropertyAssertionAxiom(hasMarriageYear, marriageInd, Integer.parseInt(my));
        manager.addAxiom(ont, assertion3);
       
       marriageModel.addElement(newMarriageLabel);
       list2.setModel(marriageModel); 
       
        try {

            manager.saveOntology(ont);
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(LoadOntology.class.getName()).log(Level.SEVERE, null, ex);
        }  
     
    }
    /**
     * @param args the command line arguments
     */
    
    public void setParentValues(String childLabel,String plabel, String pfirst, String plast, String pbirth, String pdeath,DefaultListModel m , int cls, String chiType )
    {
       String newLabel=pfirst+"_"+plast+"_"+pbirth;
       model=m;
      
      //Load ontolgy again
      
          try{
             manager = OWLManager.createOWLOntologyManager();
            File file1 = new File("C://Users/najla/Desktop/MSc project/OWL API/fhkb-mostclasses-noabox.owl");
            ont = manager.loadOntologyFromOntologyDocument(file1);
            
        }catch(OWLOntologyCreationException e )
        {
        System.err.println("OWLOntologyCreationException: " + e.getMessage()); 
        }
        
      
     
     //delete previous label
     if(!plabel.isEmpty())
     {
         OWLNamedIndividual premovedInd = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+plabel));
         System.out.println(premovedInd.getIRI().toString());
         OWLEntityRemover remover = new OWLEntityRemover(manager, Collections.singleton(ont));
         premovedInd.accept(remover);
         manager.applyChanges(remover.getChanges());
         remover.reset();
         list1.setModel(model);
         model.removeElement(plabel);
     }
      
      //Adding the new label
      OWLIndividual ind = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+newLabel));
      System.out.println(ind.getSignature().toString());
      OWLClassAssertionAxiom classAssertion20;
      
          if(cls == 1)
               classAssertion20 = df.getOWLClassAssertionAxiom(Man, ind);
          else if(cls==2)
               classAssertion20= df.getOWLClassAssertionAxiom(Woman, ind);
          else
            classAssertion20= df.getOWLClassAssertionAxiom(Person, ind);
        
         
      manager.addAxiom(ont, classAssertion20);
   
      model.addElement(newLabel);
      list1.setModel(model);
      
      
       //Adding new data property
       OWLAxiom asser21= df.getOWLDataPropertyAssertionAxiom(hasFirstName, ind, pfirst);
          manager.addAxiom(ont,asser21);
          
          OWLAxiom asser22= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, ind, plast);
          manager.addAxiom(ont,asser22);
          
          OWLAxiom asser23= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, ind, Integer.parseInt(pbirth));
          manager.addAxiom(ont,asser23);
          if(!pdeath.isEmpty())
            {
              OWLAxiom asser24= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, ind, Integer.parseInt(pdeath));
              manager.addAxiom(ont,asser24);  
            }
          
       //Adding father relation
          OWLIndividual child= df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+childLabel));
          OWLAxiom assertion88 = df.getOWLObjectPropertyAssertionAxiom(hasFather, child, ind);
          manager.addAxiom(ont, assertion88);
          
          //Adding son or daughter relation
           if(chiType.equals("Man"))
            {
              OWLAxiom assertion28 = df.getOWLObjectPropertyAssertionAxiom(hasSon, ind,child);
              manager.addAxiom(ont, assertion28);}
            else if(chiType.equals("Woman"))
            { OWLAxiom assertion29 = df.getOWLObjectPropertyAssertionAxiom(hasDaughter, ind, child);
              manager.addAxiom(ont, assertion29);}
            else
            {
              OWLAxiom assertion30 = df.getOWLObjectPropertyAssertionAxiom(hasChild, ind, child);
              manager.addAxiom(ont, assertion30);  
            }
          
          try {

            manager.saveOntology(ont);
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(LoadOntology.class.getName()).log(Level.SEVERE, null, ex);
        }  
         
           
    }
    
    public void setModifyValues(String preIndLabel,String moFirst,String moLast, String moBirth, String moDeath, String Emother,String Efather, DefaultListModel m , int cls)
    {
      
         
      String moLabel=moFirst+"_"+moLast+"_"+moBirth;
      model=m;
      
      //Load ontolgy again
       try{
             manager = OWLManager.createOWLOntologyManager();
            File file1 = new File("C://Users/najla/Desktop/MSc project/OWL API/fhkb-mostclasses-noabox.owl");
            ont = manager.loadOntologyFromOntologyDocument(file1);
            
        }catch(OWLOntologyCreationException e )
        {
        System.err.println("OWLOntologyCreationException: " + e.getMessage()); 
        }
      
     
     //delete previous label
     OWLNamedIndividual EremovedInd = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+preIndLabel));
     OWLEntityRemover remover = new OWLEntityRemover(manager, Collections.singleton(ont));
     EremovedInd.accept(remover);
     manager.applyChanges(remover.getChanges());
     remover.reset();
     list1.setModel(model);
     model.removeElement(preIndLabel);
      
      //Adding the new label
      OWLIndividual ind = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+moLabel));
      OWLClassAssertionAxiom classAssertion21;
   
          if(cls==1)
               classAssertion21 = df.getOWLClassAssertionAxiom(Man, ind);
          else if(cls==2)
               classAssertion21= df.getOWLClassAssertionAxiom(Woman, ind);
          else
            classAssertion21= df.getOWLClassAssertionAxiom(Person, ind);
        
         
      manager.addAxiom(ont, classAssertion21);
      model.addElement(moLabel);
      list1.setModel(model);
      
      
       //Adding new data property
       OWLAxiom asser23= df.getOWLDataPropertyAssertionAxiom(hasFirstName, ind, moFirst);
          manager.addAxiom(ont,asser23);
          OWLAxiom asser24= df.getOWLDataPropertyAssertionAxiom(hasFamilyName, ind, moLast);
          manager.addAxiom(ont,asser24);
          OWLAxiom asser25= df.getOWLDataPropertyAssertionAxiom(hasBirthYear, ind, Integer.parseInt(moBirth));
          manager.addAxiom(ont,asser25);
          if(!moDeath.isEmpty())
            {
              OWLAxiom asser26= df.getOWLDataPropertyAssertionAxiom(hasDeathYear, ind, Integer.parseInt(moDeath));
              manager.addAxiom(ont,asser26);  
            }
          
       //Adding father
          if(!Efather.isEmpty())
          {OWLIndividual indFather = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+Efather));
          OWLAxiom assertion27 = df.getOWLObjectPropertyAssertionAxiom(hasFather, ind, indFather);
          manager.addAxiom(ont, assertion27);
          
          //Adding son or daughter relation
           if(cls==1)
            {
              OWLAxiom assertion28 = df.getOWLObjectPropertyAssertionAxiom(hasSon, indFather,ind);
              manager.addAxiom(ont, assertion28);}
            else if(cls==2)
            { OWLAxiom assertion29 = df.getOWLObjectPropertyAssertionAxiom(hasDaughter, indFather, ind);
              manager.addAxiom(ont, assertion29);}
            else
            {
              OWLAxiom assertion30 = df.getOWLObjectPropertyAssertionAxiom(hasChild, indFather, ind);
              manager.addAxiom(ont, assertion30);  
            }
          
          }
       //Adding mother
          if(!Emother.isEmpty())
          {OWLIndividual indMother = df.getOWLNamedIndividual(IRI.create("http://www.owl.cs.manchester.ac.uk/ontologies/fhkb.owl#"+Emother));
          OWLAxiom assertion31 = df.getOWLObjectPropertyAssertionAxiom(hasMother, ind, indMother);
          manager.addAxiom(ont, assertion31);
          
          //Adding son or daughter relation
           if(cls==1)
            {
              OWLAxiom assertion28 = df.getOWLObjectPropertyAssertionAxiom(hasSon, indMother,ind);
              manager.addAxiom(ont, assertion28);}
            else if(cls==2)
            { OWLAxiom assertion29 = df.getOWLObjectPropertyAssertionAxiom(hasDaughter, indMother, ind);
              manager.addAxiom(ont, assertion29);}
            else
            {
              OWLAxiom assertion30 = df.getOWLObjectPropertyAssertionAxiom(hasChild, indMother, ind);
              manager.addAxiom(ont, assertion30);  
            }
          }
            
       try {

            manager.saveOntology(ont);
        } catch (OWLOntologyStorageException ex) {
            Logger.getLogger(LoadOntology.class.getName()).log(Level.SEVERE, null, ex);
        }
         
            
    }
    
    public void Numbers()
    {
        
        NodeSet<OWLNamedIndividual> inds1=reasoner.getInstances(Person, false);
           for (Node<OWLNamedIndividual> m : inds1) {
            for (OWLNamedIndividual j : m.getEntities()) {
                persons++;
             }}
        jLabel22.setText(String.valueOf(persons));
    
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadOntology.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadOntology.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadOntology.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadOntology.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadOntology().setVisible(true);
            }
        });
      
    }
    
 

 

    // Variables declaration - do not modify                     
    private javax.swing.JButton Adding;
    private javax.swing.JButton BaddFather;
    private javax.swing.JTextField LName;
    private javax.swing.JButton addMotherB;
    private javax.swing.JRadioButton ancestorsQ;
    private javax.swing.JTextField birth;
    private javax.swing.JRadioButton brotherOfQ;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JRadioButton childQ;
    private javax.swing.JTextField death;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteMarriage;
    private javax.swing.JButton editButton;
    private javax.swing.JButton editMarriage;
    private javax.swing.JButton execute;
    private javax.swing.JMenuItem fExit;
    private javax.swing.JTextField fName;
    private javax.swing.JMenuItem fNew;
    private javax.swing.JMenuItem fSave;
    private javax.swing.JMenuItem fSaveAs;
    private javax.swing.JRadioButtonMenuItem factPlus;
    private javax.swing.JTextField fatherBirth;
    private javax.swing.JTextField fatherDeath;
    private javax.swing.JTextField fatherLast;
    private javax.swing.JTextField fatherName;
    private javax.swing.JRadioButton fatherOfQ;
    private javax.swing.JRadioButton femaleButton;
    private javax.swing.JRadioButtonMenuItem hermit;
    private javax.swing.JRadioButton husbandQ;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JList list1;
    private javax.swing.JList list2;
    private javax.swing.JRadioButton maleButton;
    private javax.swing.JRadioButton manQ;
    private javax.swing.JTextField marriageYear;
    private javax.swing.JTextField motherBirth;
    private javax.swing.JTextField motherDeath;
    private javax.swing.JTextField motherLast;
    private javax.swing.JTextField motherName;
    private javax.swing.JRadioButton motherOfQ;
    private javax.swing.JRadioButton parentsOfQ;
    private javax.swing.JRadioButtonMenuItem pellet;
    private javax.swing.JRadioButton personQ;
    private javax.swing.JRadioButton sisterOfQ;
    private javax.swing.JTextField spouseBirth;
    private javax.swing.JTextField spouseDeath;
    private javax.swing.JRadioButton spouseF;
    private javax.swing.JTextField spouseFirst;
    private javax.swing.JTextField spouseLast;
    private javax.swing.JRadioButton spouseM;
    private javax.swing.JRadioButton spouseQ;
    private javax.swing.JRadioButton wifeQ;
    private javax.swing.JRadioButton womanQ;
    // End of variables declaration                   

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
